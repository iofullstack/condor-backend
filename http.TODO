DocumentaciÃ³n de las peticiones http:

  ## Role
  GET:
    /api/roles
      @send {}
      @return {
        [Role] --> vector de tipo RoleSchema(_id,title,permits=[Permit],createdAt)
      }

    /api/roles/:id
      @send {}
      @return {
        Role --> objeto de tipo RoleSchema(_id, title, permits=[Permit], createdAt)
      }

  POST:
    /api/roles
      @send {
        title: 'It is a title' --> Ejemplo 'Witer' or 'Admin'
      }
      @return {
        message: 'Role saved',
        savedRole: Role --> objeto de tipo RoleSchema(_id, title, permits=[Permit], createdAt)
      }

  ## Permit
  POST:
    /api/roles/:id/permits
      @send {
        description: 'It is a description' --> Ejemplo 'Registrar Cliente' or 'Kardex de productos'
      }
      @return {
        message: 'Permit saved',
        savedPermit: Permit --> objeto de tipo PermitSchema(_id, description, createdAt)
      }

  ## CLIENT
  GET:
    /api/clients
      @send {}
      @return {
        [Client] --> vector de tipo ClientSchema(_id, nit_passport, firstName, lastName, createdAt)
      }

    /api/clients/:id
      @send {}
      @return {
        Client --> objeto de tipo ClientSchema(_id, nit_passport, firstName, lastName, createdAt)
      }
  POST:
    /api/clients
      @send
        {
          nit_passport,
          firstName,
          lastName
        }
      @return
        {
          message: 'Client saved'
          savedClient: Client --> objeto de tipo ClientSchema(_id, nit_passport, firstName, lastName, createdAt)
        }

  ## USER
  POST:
    /api/users
      @send
        {
          ci
          exp --> Expirado. Ejemplo 'Tj' or 'Ch'
          firstName
          lastName
          avatar: 'base64'
          email
          password
          gender
          birthdate
          address
          cellphone
          createdAt: Date
          role: 'Waiter'
          permits: ['Permiso1','Permiso2','Permiso3','Permiso4']
        }
      @return
        {
          message: 'User saved',
          savedUser: User
        }
